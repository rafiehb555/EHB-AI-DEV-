// 📁 /services/SOT-Technologies/EHB-AI-Dev/ai-agent/ehb-free-agent.js
// ✅ EHB Replit Agent using Free APIs (Ollama, GPT4All, Whisper, etc.)

const fs = require("fs");
const path = require("path");
const { exec } = require("child_process");
const fetch = require("node-fetch");

const logFile = path.join(__dirname, "../../../logs/free-agent.log");
const configPath = path.join(__dirname, "../../../config/free-api.json");

function log(msg) {
  const line = `[${new Date().toISOString()}] ${msg}`;
  fs.appendFileSync(logFile, line + "\n");
  console.log(line);
}

function loadConfig() {
  if (!fs.existsSync(configPath)) return {};
  return JSON.parse(fs.readFileSync(configPath, "utf-8"));
}

async function generateCode(prompt) {
  const config = loadConfig();

  if (config.useOllama) {
    try {
      const res = await fetch("http://localhost:11434/api/generate", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ model: "codellama", prompt, stream: false })
      });
      const data = await res.json();
      log("✅ Code generated via Ollama");
      return data.response;
    } catch (e) {
      log("❌ Ollama API failed: " + e.message);
    }
  }

  if (config.useGPT4All) {
    try {
      const res = await fetch("http://localhost:4891/api/v1/chat/completions", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ messages: [{ role: "user", content: prompt }], stream: false })
      });
      const data = await res.json();
      log("✅ Code generated via GPT4All");
      return data.choices[0].message.content;
    } catch (e) {
      log("❌ GPT4All API failed: " + e.message);
    }
  }

  log("⚠️ No active API in config or all failed.");
  return "// No code generated. Check API config.";
}

async function saveCodeToFile(fileName, content) {
  const filePath = path.join(__dirname, "../../../generated/", fileName);
  fs.mkdirSync(path.dirname(filePath), { recursive: true });
  fs.writeFileSync(filePath, content);
  log(`📁 Code saved: ${fileName}`);
}

async function runExample() {
  const userPrompt = "Write a Node.js script to read a JSON file and print its contents.";
  const result = await generateCode(userPrompt);
  await saveCodeToFile("readJson.js", result);
}

runExample();


// 📁 /services/SOT-Technologies/EHB-AI-Dev/ai-agent/sdkInstaller.js
// ✅ Auto-install npm, pip, git SDKs

const install = require("child_process").exec;

const pkgs = {
  node: ["axios", "chalk", "dotenv"],
  python: ["requests", "openai", "gpt4all"],
  system: ["git", "curl"]
};

function run(command, label) {
  console.log(`📦 Installing ${label}...`);
  install(command, (err, out, errMsg) => {
    if (err) return console.error(`❌ ${label} failed:\n${errMsg}`);
    console.log(`✅ Installed ${label}\n${out}`);
  });
}

function setup() {
  run(`npm install ${pkgs.node.join(" ")}`, "Node.js SDKs");
  run(`pip install ${pkgs.python.join(" ")}`, "Python SDKs");
  pkgs.system.forEach(tool => run(`${tool} --version`, tool));
}

setup();


// 📁 /config/free-api.json
{
  "useOllama": true,
  "useGPT4All": false,
  "useWhisper": false,
  "ollamaURL": "http://localhost:11434",
  "gpt4allURL": "http://localhost:4891/api/v1/chat/completions",
  "whisperCommand": "./whisper --model base.en --file voice.wav"
}


// 📁 /services/SOT-Technologies/EHB-AI-Dev/ai-agent/whisperCommand.js
// ✅ Whisper integration to transcribe voice.wav

const whisper = require("child_process").exec;
const whisperPath = path.join(__dirname, "../../../voice.wav.txt");

function runWhisper() {
  const cfg = JSON.parse(fs.readFileSync(configPath, "utf-8"));
  const cmd = cfg.whisperCommand;
  if (!cmd) return log("❌ No whisper command found.");

  log("🎤 Running Whisper...");
  whisper(cmd, (err, _, errMsg) => {
    if (err) return log("❌ Whisper failed: " + errMsg);
    if (fs.existsSync(whisperPath)) log("📝 Whisper result: " + fs.readFileSync(whisperPath, "utf-8"));
    else log("⚠️ No output found.");
  });
}

runWhisper();


// 📁 /services/SOT-Technologies/EHB-AI-Dev/ai-agent/voice-test.sh
# ✅ Shell script to run whisper.cpp transcription

#!/bin/bash
WHISPER_BIN="./whisper"
INPUT_FILE="voice.wav"
OUTPUT_FILE="voice.wav.txt"

[ ! -f "$WHISPER_BIN" ] && echo "❌ Whisper not found." && exit 1
[ ! -f "$INPUT_FILE" ] && echo "❌ voice.wav not found." && exit 1

$WHISPER_BIN --model base.en --file $INPUT_FILE > /dev/null
[ -f "$OUTPUT_FILE" ] && echo "✅ Saved to $OUTPUT_FILE" && cat "$OUTPUT_FILE" || echo "⚠️ Failed to generate output"


# 📁 /.github/workflows/ci.yml
# ✅ GitHub CI/CD for EHB Free Agent

name: EHB Agent CI/CD
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '18'
      - run: npm install || true
      - run: echo "console.log('✅ Test successful')" > test.js && node test.js
      - run: npm install eslint --save-dev || true
      - run: npx eslint ./services/SOT-Technologies/EHB-AI-Dev/ai-agent/*.js || true
      - run: zip -r ehb-dev-backup.zip .
      - uses: actions/upload-artifact@v3
        with:
          name: ehb-agent-backup
          path: ehb-dev-backup.zip
