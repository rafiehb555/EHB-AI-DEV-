/**
 * EHB Service Synchronization
 * 
 * This script handles Step 6 of the EHB organization plan:
 * - Syncs all active services and departments with:
 *   - /admin/EHB-HOME/
 *   - /admin/EHB-DASHBOARD/
 *   - /services/EHB-AI-Marketplace/
 * - Every module shows a card or tile in these main UIs
 */

const fs = require('fs');
const path = require('path');
const { FOLDER_MAPPING } = require('./ehb-folder-organizer');

// Root directory
const ROOT_DIR = path.resolve('.');

/**
 * Log messages to console with timestamp
 */
function log(message) {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${message}`);
}

/**
 * Generate service metadata for a given service
 */
function generateServiceMetadata(serviceName) {
  // Determine category from the folder mapping
  let category = Object.keys(FOLDER_MAPPING).find(category =>
    FOLDER_MAPPING[category].includes(serviceName)
  );
  
  // Default values for service metadata
  return {
    id: serviceName.toLowerCase().replace(/[-\s]/g, '_'),
    name: serviceName,
    displayName: serviceName.replace(/^EHB-/, '').replace(/-/g, ' '),
    category: category || 'unknown',
    description: `${serviceName} service module`,
    icon: 'default-service-icon',
    status: 'active',
    port: 5000, // Default port, would need to be configured per service
    endpoints: {
      api: `/api/${serviceName.toLowerCase().replace(/[-\s]/g, '_')}`,
      healthCheck: `/api/${serviceName.toLowerCase().replace(/[-\s]/g, '_')}/health`
    },
    lastUpdated: new Date().toISOString(),
    version: '1.0.0',
    dependencies: [],
    maintainers: []
  };
}

/**
 * Sync services with EHB-HOME
 */
function syncWithHome() {
  log('Syncing services with EHB-HOME');
  
  const homeDir = path.join(ROOT_DIR, 'EHB-HOME');
  const servicesDir = path.join(homeDir, 'services');
  
  // Create services directory if it doesn't exist
  if (!fs.existsSync(servicesDir)) {
    fs.mkdirSync(servicesDir, { recursive: true });
    log(`Created services directory: ${servicesDir}`);
  }
  
  // Get all services from the mapping
  const allServices = Object.values(FOLDER_MAPPING).flat();
  const serviceMetadata = [];
  
  // Generate metadata for each service
  allServices.forEach(service => {
    try {
      const metadata = generateServiceMetadata(service);
      serviceMetadata.push(metadata);
      
      // Write individual service file
      const serviceFile = path.join(servicesDir, `${metadata.id}.json`);
      fs.writeFileSync(serviceFile, JSON.stringify(metadata, null, 2));
      log(`Created service metadata for ${service}: ${serviceFile}`);
    } catch (error) {
      log(`Error generating metadata for ${service}: ${error.message}`);
    }
  });
  
  // Write consolidated services file
  const servicesFile = path.join(homeDir, 'services.json');
  fs.writeFileSync(servicesFile, JSON.stringify(serviceMetadata, null, 2));
  log(`Created consolidated services file: ${servicesFile}`);
  
  // Update moduleConfig.js in EHB-HOME
  const moduleConfigPath = path.join(homeDir, 'utils', 'moduleConfig.js');
  
  // Create utils directory if it doesn't exist
  const utilsDir = path.join(homeDir, 'utils');
  if (!fs.existsSync(utilsDir)) {
    fs.mkdirSync(utilsDir, { recursive: true });
  }
  
  const moduleConfig = `/**
 * EHB Module Configuration
 * Auto-generated by ehb-service-sync.js
 */

const modules = ${JSON.stringify(serviceMetadata, null, 2)};

export default modules;
`;
  
  fs.writeFileSync(moduleConfigPath, moduleConfig);
  log(`Updated module configuration: ${moduleConfigPath}`);
  
  return {
    homeDir,
    servicesCount: serviceMetadata.length,
    serviceMetadata
  };
}

/**
 * Sync services with EHB-DASHBOARD
 */
function syncWithDashboard() {
  log('Syncing services with EHB-DASHBOARD');
  
  const dashboardDir = path.join(ROOT_DIR, 'EHB-DASHBOARD');
  const servicesDir = path.join(dashboardDir, 'backend', 'data', 'services');
  
  // Create services directory if it doesn't exist
  if (!fs.existsSync(servicesDir)) {
    fs.mkdirSync(servicesDir, { recursive: true });
    log(`Created services directory: ${servicesDir}`);
  }
  
  // Get all services from the mapping
  const allServices = Object.values(FOLDER_MAPPING).flat();
  const serviceMetadata = [];
  
  // Generate metadata for each service
  allServices.forEach(service => {
    try {
      const metadata = generateServiceMetadata(service);
      serviceMetadata.push(metadata);
      
      // Write individual service file
      const serviceFile = path.join(servicesDir, `${metadata.id}.json`);
      fs.writeFileSync(serviceFile, JSON.stringify(metadata, null, 2));
      log(`Created service metadata for ${service}: ${serviceFile}`);
    } catch (error) {
      log(`Error generating metadata for ${service}: ${error.message}`);
    }
  });
  
  // Write consolidated services file
  const servicesFile = path.join(dashboardDir, 'backend', 'data', 'services.json');
  const servicesDataDir = path.join(dashboardDir, 'backend', 'data');
  
  // Create data directory if it doesn't exist
  if (!fs.existsSync(servicesDataDir)) {
    fs.mkdirSync(servicesDataDir, { recursive: true });
  }
  
  fs.writeFileSync(servicesFile, JSON.stringify(serviceMetadata, null, 2));
  log(`Created consolidated services file: ${servicesFile}`);
  
  return {
    dashboardDir,
    servicesCount: serviceMetadata.length,
    serviceMetadata
  };
}

/**
 * Sync services with EHB-AI-Marketplace
 */
function syncWithMarketplace() {
  log('Syncing services with EHB-AI-Marketplace');
  
  const marketplaceDir = path.join(ROOT_DIR, 'EHB-AI-Marketplace');
  const servicesDir = path.join(marketplaceDir, 'data', 'services');
  
  // Create services directory if it doesn't exist
  if (!fs.existsSync(servicesDir)) {
    fs.mkdirSync(servicesDir, { recursive: true });
    log(`Created services directory: ${servicesDir}`);
  }
  
  // Get all services from the mapping
  const allServices = Object.values(FOLDER_MAPPING).flat();
  const serviceMetadata = [];
  
  // Generate marketplace-specific metadata for each service
  allServices.forEach(service => {
    try {
      // Base metadata
      const baseMetadata = generateServiceMetadata(service);
      
      // Enhanced metadata for marketplace
      const marketplaceMetadata = {
        ...baseMetadata,
        pricing: {
          model: 'free',
          amount: 0
        },
        features: [
          'Basic integration',
          'API access',
          'Dashboard view'
        ],
        rating: 4.5,
        downloads: 100,
        tags: [baseMetadata.category],
        installInstructions: `Visit the marketplace page for ${service} to install.`
      };
      
      serviceMetadata.push(marketplaceMetadata);
      
      // Write individual service file
      const serviceFile = path.join(servicesDir, `${marketplaceMetadata.id}.json`);
      fs.writeFileSync(serviceFile, JSON.stringify(marketplaceMetadata, null, 2));
      log(`Created marketplace metadata for ${service}: ${serviceFile}`);
    } catch (error) {
      log(`Error generating marketplace metadata for ${service}: ${error.message}`);
    }
  });
  
  // Write consolidated services file
  const servicesFile = path.join(marketplaceDir, 'data', 'services.json');
  const servicesDataDir = path.join(marketplaceDir, 'data');
  
  // Create data directory if it doesn't exist
  if (!fs.existsSync(servicesDataDir)) {
    fs.mkdirSync(servicesDataDir, { recursive: true });
  }
  
  fs.writeFileSync(servicesFile, JSON.stringify(serviceMetadata, null, 2));
  log(`Created consolidated marketplace services file: ${servicesFile}`);
  
  return {
    marketplaceDir,
    servicesCount: serviceMetadata.length,
    serviceMetadata
  };
}

/**
 * Main function to synchronize services
 */
function synchronizeServices() {
  log('Starting EHB service synchronization');
  
  // Sync with EHB-HOME
  const homeResult = syncWithHome();
  log(`Synced ${homeResult.servicesCount} services with EHB-HOME`);
  
  // Sync with EHB-DASHBOARD
  const dashboardResult = syncWithDashboard();
  log(`Synced ${dashboardResult.servicesCount} services with EHB-DASHBOARD`);
  
  // Sync with EHB-AI-Marketplace
  const marketplaceResult = syncWithMarketplace();
  log(`Synced ${marketplaceResult.servicesCount} services with EHB-AI-Marketplace`);
  
  log('EHB service synchronization completed');
  
  return {
    homeResult,
    dashboardResult,
    marketplaceResult,
    totalServices: homeResult.servicesCount,
    timestamp: new Date().toISOString()
  };
}

// Execute if run directly
if (require.main === module) {
  synchronizeServices();
}

module.exports = {
  synchronizeServices
};