/**
 * API Tests for the Fullstack AI Agent
 * 
 * These tests verify that all API endpoints are working correctly,
 * including webhook triggers and AI component generation.
 */

const request = require('supertest');
const { expect } = require('chai');
const sinon = require('sinon');
const express = require('express');
const path = require('path');
const fs = require('fs');

// Mock the OpenAI API for testing
const mockOpenAI = {
  chat: {
    completions: {
      create: sinon.stub().resolves({
        choices: [
          {
            message: {
              content: `
import React, { useState } from 'react';

/**
 * TestComponent - A test component generated by AI
 */
export default function TestComponent() {
  const [count, setCount] = useState(0);
  
  return (
    <div className="p-4 bg-gray-100 rounded-lg">
      <h2 className="text-xl font-bold">Test Component</h2>
      <p>Count: {count}</p>
      <button 
        className="px-4 py-2 mt-2 text-white bg-blue-500 rounded hover:bg-blue-600"
        onClick={() => setCount(count + 1)}
      >
        Increment
      </button>
    </div>
  );
}
              `
            }
          }
        ]
      })
    }
  }
};

// Mock the app and its dependencies
const setupTestApp = () => {
  // Mock environment variables and dependencies
  process.env.OPENAI_API_KEY = 'test-api-key';
  process.env.WEBHOOK_SECRET = 'test-webhook-secret';
  
  // Create test directories if they don't exist
  const testDirs = ['components', 'pages', 'logs', 'deployments'];
  testDirs.forEach(dir => {
    const dirPath = path.join(process.cwd(), dir);
    if (!fs.existsSync(dirPath)) {
      fs.mkdirSync(dirPath, { recursive: true });
    }
  });
  
  // Create the express app
  const app = express();
  app.use(express.json());
  
  // Stub the OpenAI client
  const aiCoderPath = path.join(process.cwd(), 'agent/utils/ai-coder.js');
  const originalAiCoder = require(aiCoderPath);
  sinon.stub(originalAiCoder, 'generateComponent').callsFake(async (description, name, outputDir) => {
    const filePath = path.join(process.cwd(), outputDir, `${name}.tsx`);
    fs.writeFileSync(filePath, `// Mock component for ${name}`);
    return filePath;
  });
  
  // Add webhook routes
  const webhookRoutes = require('../webhooks/trigger');
  app.use('/api/webhooks', webhookRoutes);
  
  return app;
};

describe('API Tests', () => {
  let app;
  
  before(() => {
    app = setupTestApp();
  });
  
  after(() => {
    // Clean up mocks and stubs
    sinon.restore();
  });
  
  describe('Webhook Endpoints', () => {
    it('should return 200 for webhook status check', async () => {
      const response = await request(app).get('/api/webhooks/status');
      
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property('status', 'operational');
    });
    
    it('should reject unauthorized webhook requests', async () => {
      const response = await request(app)
        .post('/api/webhooks/n8n')
        .send({ action: 'generate-component', data: {} });
      
      expect(response.status).to.equal(403);
      expect(response.body).to.have.property('error', 'Invalid signature');
    });
    
    it('should process authorized webhook requests', async () => {
      const response = await request(app)
        .post('/api/webhooks/n8n')
        .set('X-Webhook-Signature', 'test-webhook-secret')
        .send({
          action: 'generate-component',
          data: {
            name: 'TestComponent',
            description: 'A simple test component with a counter'
          }
        });
      
      expect(response.status).to.equal(200);
      expect(response.body).to.have.property('status', 'success');
      expect(response.body.message).to.include('Component generated successfully');
    });
    
    it('should reject webhook requests with missing parameters', async () => {
      const response = await request(app)
        .post('/api/webhooks/n8n')
        .set('X-Webhook-Signature', 'test-webhook-secret')
        .send({
          action: 'generate-component',
          data: {
            // Missing required parameters
          }
        });
      
      expect(response.status).to.equal(400);
      expect(response.body).to.have.property('error');
    });
  });
  
  // Additional test cases can be added here
});

// Helper functions for testing
function createMockRequest(path, method = 'GET', data = {}) {
  return {
    path,
    method,
    body: data,
    headers: {},
    query: {}
  };
}

function createMockResponse() {
  const res = {};
  res.status = sinon.stub().returns(res);
  res.json = sinon.stub().returns(res);
  res.send = sinon.stub().returns(res);
  return res;
}